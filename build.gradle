import java.util.regex.Pattern

group 'se.lovef'
version resolveVersionString()

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    version = rootProject.version
    group = rootProject.group

    repositories {
        mavenCentral()
    }
}

//noinspection GroovyAssignabilityCheck
task releaseTag {
    doLast {
        def currentReleaseTags = getCurrentReleaseTags()
        if (!currentReleaseTags.isEmpty()) {
            def currentTags = currentReleaseTags.join(' ')
            println "Current tags: $currentTags"
            println "delete with:  git tag --delete $currentTags"
            println()
            println "... do nothing"
            return
        }
        def prefix = "v$baseVersion."
        def tags = execForOutput('git', 'tag', '-l', "$prefix*")
                .split('\n')
                .findAll { !it.isEmpty() }
        def nextPatch = tags
                .collect { it.substring(prefix.length()).replaceFirst(/\D.+/, '') }
                .findAll { !it.isEmpty() }
                .collect { Integer.parseInt(it) }
                .max()?.with { it + 1 } ?: 0
        def tag = "$prefix$nextPatch"
        println execForOutput('git', 'tag', tag)

        println "Created tag $tag"
        println "To delete:  git tag --delete $tag"
        println "To push:    git push origin $tag"
        println()
        println "Version: " + resolveVersionString()
    }
}

private resolveVersionString() {
    def currentReleaseTags = getReleaseTag()
    return currentReleaseTags?.replaceFirst(/^v/, '') ?: "$baseVersion-SNAPSHOT"
}

private String getReleaseTag() {
    def currentReleaseTags = getCurrentReleaseTags()
    if (currentReleaseTags.isEmpty()) {
        return null
    }
    else if (currentReleaseTags.size() == 1) {
        return currentReleaseTags.first()
    } else {
        throw new Exception("To manny release tags: $currentReleaseTags")
    }
}

private ArrayList<String> getCurrentReleaseTags() {
    def releaseTagPattern = Pattern.quote("v$baseVersion.") + /\d+/
    execForOutput('git', 'tag', '--points-at', 'HEAD')
            .split('\n')
            .findAll { it != null && it.matches(releaseTagPattern) }
}

private String execForOutput(String... arguments) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine arguments
        standardOutput = stdout
    }
    return stdout.toString()
}